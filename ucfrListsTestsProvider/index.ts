import fs from 'node:fs'
import StringGenerator from "./modules/StringGenerator"
import { TestsWriter } from "./modules/TestsWriter"
import TestsSpecHandler from "./modules/TestsSpecHandler"
import ControlFileAnalyzer from "./modules/ControlFileAnalyzer"

const pathToTests = './__tests__/autoGenerated'
const controlFileName = 'controlFile.json'
const controlFilePath = `${pathToTests}/${controlFileName}`

// generate folder to tests and control file if not exists
fs.mkdirSync(pathToTests, { recursive: true })
if (!fs.existsSync(controlFilePath)) {
    fs.writeFileSync(`${pathToTests}/${controlFileName}`, JSON.stringify({}))
}
// analyze control file
const labelReturnedFromControlFile = ControlFileAnalyzer.getControlLabel(controlFilePath)
// backup folder
const backupFolderName = '__backupTests__'
// check if backup folder exists
if (fs.existsSync(backupFolderName)) {
    fs.rmdirSync(backupFolderName, { recursive: true })
}
fs.mkdirSync(backupFolderName, { recursive: true })
fs.cpSync(pathToTests, backupFolderName, { recursive: true })

// get tests specification
const testsSpecification = fs.readFileSync('./ucfrListsTestsProvider/example.json', 'utf-8')

const parsedAndValidatedTestsSpec = TestsSpecHandler.parseAndValidateFromJSON(testsSpecification)

// generate tests
{
    // labels to control the files that will be generated and managed by the tests writer
    const newLabelToControlFileInfo = StringGenerator.generate(10) + Date.now()
    const oldLabelToControlFileInfo = labelReturnedFromControlFile
    let contentForEmptyFile = ``

    TestsWriter.checkAndCreateAllMissingFolders({
        currentDepth: 0,
        currentFolder: parsedAndValidatedTestsSpec,
        currentPath: pathToTests,
        depthLimit: 10,
    })
    
    TestsWriter.checkAndCreateMissingFilesForAllFoldersAndSubFolders({
        currentDepth: 0,
        depthLimit: 10,
        currentFolder: parsedAndValidatedTestsSpec,
        currentPath: pathToTests,
        contentForEmptyFile: contentForEmptyFile,
        updatedLabelToControlFileInfo: newLabelToControlFileInfo,
    })
    
    TestsWriter.enterFilesToCheckAndWriteControlledLines({
        currentDepth: 0,
        depthLimit: 10,
        currentFolder: parsedAndValidatedTestsSpec,
        currentPath: pathToTests,
        updatedLabelToControlFileInfo: newLabelToControlFileInfo,
        parsedTestsSpecification: parsedAndValidatedTestsSpec,
        oldLabelToControlFileInfo: oldLabelToControlFileInfo,
    })

    // write new label to control file
    fs.writeFileSync(controlFilePath, JSON.stringify({ label: newLabelToControlFileInfo }))
}

